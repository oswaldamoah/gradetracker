# Making text input required with a function
def get_course_code():
   while True:
       course_code = str(input("Enter Course code: "))
       if course_code.strip():  # Check if course code is not empty
           return course_code
       else:
           print("Course code is required. Please enter a valid code.")

# Making numerical input required with a function
def get_float_input(prompt):
   while True:
       try:
           return float(input(prompt))
       except ValueError:
           print("Invalid input. Please enter a number.")

# Input course code
course_code = get_course_code()  

# Input Assignment Scores
total_assignment_score = get_float_input("Enter Assignment 1 Score (20): ") + get_float_input("Enter Assignment 2 Score (30) : ")

# Input Exam Score
exam_score = float(input("Enter Exam Score (100): ")) / 100

# Expression for Average Assignment
assignment_average = total_assignment_score / 50


# Expression for final Score
final_score = (assignment_average * 30) + (exam_score * 70)


# Conditional Statement for finding grade
if final_score >= 85:
    final_grade = "A+"
elif final_score >= 80:
    final_grade = "A"
elif final_score >= 75:
    final_grade = "B+"
elif final_score >= 70:
    final_grade = "B"
elif final_score >= 65:
    final_grade = "C+"
elif final_score >= 60:
    final_grade = "C"
elif final_score >= 55:
    final_grade = "D+"
elif final_score >= 50:
    final_grade = "D"
else:
    final_grade = "E"

# Expression for GPA
gpa = (final_score / 100) * 4


# Display results
print(f"\nCOURSE: {course_code}\n"
     f"RAW SCORE: {final_score:.2f}/100\n"
     f"GRADE: {final_grade}\n"
     f"GPA: {gpa:.2f}")


# DONE
"""
* Take scores input for one course
* Calculate and display Raw Score and GPA
"""

#TO DO
"""
This is a smaller project
* Add remark system to if statement and call it in printed results 
* Make code interactive:
Welcome to LMS for UG
    - Enter scores (Adds new scores or overwrites all old scores)
        What course would you like to add scores for?
        - All 7 courses listed (depending on what is chosen, it is noted) # U can use dictionary of ussd style {"1":"MATH223" and so on}
          # Ask same previous input questions, but for that specific object course (assignment1, assignment2, examscore)
          # Calculate and Display grades for all courses based on if statement
          # Calculate and Display collective RAW Score and GPA 
          # Calculate Aggregate (sum of scores 4 core subjects and best 2 subjects / 600)
    # Draw a class diagram for the OOP
    # Complete ReadMe.md

    WORK ON A LARGER PROJECT FOR UNI. CALCULATES GPA AS YOU KEEP ADDING GRADES FOR SEMESTERS
    

You can select courses from a list of 8 courses (Each course will be an object)
All course raw scores will be added together to get the gpa
Function to edit course info



"""


---------------------------------------------------------------------------------------------------------------------------------------





class Course:
    def __init__(self, name, final_score=0, grade=None, remark=None,):
        self.name = name
        self.final_score = final_score
        self.grade = grade
        self.remark = remark


# Enter assignment 1 score (12.5%)
# Enter assignment 2 score (12.5%)
# Enter midsem score (25%)
# Enter endOfSem score (50%)
# function that takes only numbers for scores 

# fxn such that if a course's info already exists, addmath won't run again

def start():

    print("OT High School Grade Tracker") # Header
    print(f"\t1. Enter Scores\n\t2. Get Course Information\n\t3. Edit Scores\n\t4. Reset Course\n\t5. General Information\n\tx. Exit")
    # Multiple choice prompt

    while True:
        choice1 = input("* Select an option: ")
        print("")


        match choice1:
            case '1':
                def append():
                    new_course = add_course()
                    courses.append(new_course) # Adds course object to object list
                append()
                while True:
                    print("")
                    user_choice = input("Do you want to add another profile? (y/n): ").lower() # Always be lowercased
                    print("")
                    if user_choice == 'y':
                        append()
                    elif user_choice == 'n':
                        break
                    else:
                        print("Enter either 'y' or 'n'")


                # Printing info for for courses after exiting data entry loop
                print("COURSE INFORMATION:")
                for course in courses: #For an object in the list
                    print("Course Name:", course.name)
                    print("Course Score:", course.final_score)
                    print("Course Grade:", course.grade)
                    print("Course Remark: ",course.remark)
                    print("")

                goHome() # Allows to easily go home or exit after each fxn
                break

            case '2':
                #course_info()
                goHome()
                break

            case '3':
                id = input("Enter ID of profile you want to edit: ")
                #edit_profile(id)
                goHome()
                break

            case '4':
                id = input("Enter ID of profile you want to delete: ")
                delete_profile(id)
                goHome()
                break

            case '5':
                general_info()
                goHome()
                break
            case 'x':
                print("Exiting the platform...")
                break  
            case _:
                print("Invalid choice. Please enter a number from '1-6' or x ")




def e_course():
    name = input("Enter course name: ")
    a1 = (float(input("Enter Assignment 1 Score (20): ")))/20
    a2 = float(input("Enter Assignment 2 Score (20): "))/20
    ms = float(input("Enter Mid-Semester Score (30): "))/30
    eos = (input("Enter End-Of-Semester Exam Score (100): "))/100

    final_score = (a1*12.5)+(a2*12.5)+(ms*25)+(eos*50)

    final_grade = calculate_grade(final_score)

    final_remark = calculate_remark(final_score)




    return Course(name, final_score, final_grade, final_remark)


courses = [] # List of profile objects








def calculate_grade(final_score):
    if final_score >= 85:
        final_grade = "A+"
    elif final_score >= 80:
        final_grade = "A"
    elif final_score >= 75:
        final_grade = "B+"
    elif final_score >= 70:
        final_grade = "B"
    elif final_score >= 65:
        final_grade = "C+"
    elif final_score >= 60:
        final_grade = "C"
    elif final_score >= 55:
        final_grade = "D+"
    elif final_score >= 50:
        final_grade = "D"
    else:
        final_grade = "E"
    
    return final_grade

def calculate_remark(final_score):
    if final_score >= 85:
        remark = "Outstanding"
    elif final_score >= 80:
        remark = "Excellent"
    elif final_score >= 75:
        remark = "Very Good"
    elif final_score >= 70:
        remark = "Good"
    elif final_score >= 65:
        remark = "Average"
    elif final_score >= 60:
        remark = "Pass"
    elif final_score >= 55:
        remark = "Poor"
    elif final_score >= 50:
        remark = "Very Poor"
    else:
        remark = "Fail"
    
    return remark



def goHome():
    print("")
    
    while True:
        decision = input("Homepage-'0' | Exit-'x' : ")
        print("")

        match decision:
            case '0':
                start()
                break
            case 'x':
                break
            case _:
                print("Enter either '0 - Home' or 'x - Exit'")